{"version":3,"sources":["Time.js","Navitem.js","Nav.js","Message.js","Chat.js","Groupcontacts.js","Main.js","Newuser.js","Login.js","Approveadd.js","Addcontact.js","Contacts.js","Addgroup.js","App.js","index.js"],"names":["parseTime","timestamp","ampm","toDate","getHours","hoursShift","getMinutes","parseDate","getDate","getMonth","getFullYear","Navitem","props","now","useState","activeChat","setActiveChat","Menu","Item","name","title","onClick","chat","chatID","active","Comment","Group","Avatar","src","Content","Author","as","style","color","type","Icon","Metadata","chatTrans","data","length","date","dbFunc","Timestamp","Text","height","display","overflow","textOverflow","whiteSpace","marginRight","author","id","user","content","uniqid","require","Nav","position","width","flexDirection","flex","alignItems","alignContent","padding","background","size","setVisible","marginLeft","Form","flexGrow","Input","transparent","textColor","placeholder","secondary","vertical","fluid","marginTop","overflowY","chats","map","undefined","chatsTrans","find","i","chatOther","users","userID","key","Message","Chat","feed","setFeed","useEffect","document","getElementById","scrollIntoView","db","Groupcontacts","contacts","setContacts","selectedContacts","setSelectedContacts","collection","doc","get","then","contactGets","contact","Promise","all","result","open","Modal","Header","icon","iconPosition","onChange","e","List","selection","filter","concat","handleClick","Actions","Button","setGroupContacts","add","groupAddName","update","FieldValue","arrayUnion","forEach","primary","Main","chatTitle","setChatTitle","chatDescription","setChatDescription","activeChatObject","onSubmit","preventDefault","target","reply","value","catch","error","console","Newuser","email","setEmail","setName","password","setPassword","formError","setFormError","errorCode","setErrorCode","errorMessage","setErrorMessage","firebase","createUserWithEmailAndPassword","uid","set","merge","setNewUser","code","message","newUserSubmit","Segment","raised","header","Login","newUser","loginSubmit","loginError","loginErrorCode","loginErrorMessage","googleLoginSubmit","Approveadd","contactSelect","setContactSelect","addrequests","addRequests","request","approveAddOpen","ref","setAddRequests","setApproveAddOpen","Addcontact","addContactOpen","where","querySnapshot","empty","log","some","docs","setAddContactOpen","sendRequest","Contacts","privateChatExists","chatGets","j","setOpenContacts","startPrivateChat","Addgroup","group","setGroup","setAddGroup","setGroupAddName","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","setUser","chatIDs","setChatIDs","setUsers","loginOpen","setLoginOpen","setLoginError","openContacts","addGroup","groupContacts","setGroupAddContacts","visible","useReducer","state","action","chatsData","chatsDataUpdate","chatsTransUpdate","results","userGets","flat","loginDataLoad","userRef","exists","displayName","onSnapshot","snapshot","handleUserUpdate","handleAddRequests","handleChats","orderBy","resolve","requests","Pushable","animation","inverted","Pusher","dimmed","left","signInWithEmailAndPassword","provider","GoogleAuthProvider","signInWithPopup","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.46e54aa4.chunk.js","sourcesContent":["const parseTime = (timestamp) => {\r\n  const ampm = timestamp.toDate().getHours() < 12 ? \"AM\" : \"PM\";\r\n  const hoursShift = (timestamp.toDate().getHours() + 12) % 12;\r\n  const hours = hoursShift === 0 ? 12 : hoursShift;\r\n  const minutes =\r\n    timestamp.toDate().getMinutes() < 10\r\n      ? \"0\" + timestamp.toDate().getMinutes()\r\n      : timestamp.toDate().getMinutes();\r\n  return hours + \":\" + minutes + \" \" + ampm;\r\n};\r\n\r\nconst parseDate = (timestamp) => {\r\n  return (\r\n    timestamp.toDate().getDate() +\r\n    \".\" +\r\n    timestamp.toDate().getMonth() +\r\n    \".\" +\r\n    (timestamp.toDate().getFullYear() - 2000)\r\n  );\r\n};\r\n\r\nconst parsePast = (timestamp, now) => {\r\n  const minute = 60;\r\n  const hour = minute * 60;\r\n  const day = hour * 24;\r\n  const timeDiff = now.seconds - timestamp.seconds;\r\n  if (timeDiff < minute) {\r\n    return \"just now\";\r\n  }\r\n  if (timeDiff < minute * 2) {\r\n    return \"1 minute\";\r\n  }\r\n  if (timeDiff < hour) {\r\n    return Math.floor(timeDiff / minute) + \" minutes\";\r\n  }\r\n  if (timeDiff < hour * 2) {\r\n    return \"1 hour\";\r\n  }\r\n  if (timeDiff < day) {\r\n    return Math.floor(timeDiff / hour) + \" hours\";\r\n  }\r\n  return parseDate(timestamp);\r\n};\r\n\r\nconst dayEquality = (timestamp, now) => {\r\n  if (\r\n    timestamp.toDate().getDate() === now.toDate().getDate() &&\r\n    timestamp.toDate().getMonth() === now.toDate().getMonth() &&\r\n    timestamp.toDate().getFullYear() === now.toDate().getFullYear()\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport { parseTime, parseDate, parsePast, dayEquality };\r\n","import React, { useState } from \"react\";\n\nimport { Menu, Comment, Icon } from \"semantic-ui-react\";\n\nimport { parseTime, parseDate, dayEquality } from \"./Time\";\n\nconst Navitem = (props) => {\n  const [activeChat, setActiveChat] = useState(props.activeChat);\n  return (\n    <Menu.Item\n      name={props.title}\n      onClick={() => {\n        props.setActiveChat(props.chat.chatID);\n        setActiveChat(props.chat.chatID);\n      }}\n      active={props.chat.chatID === props.activeChat}\n    >\n      <Comment.Group>\n        <Comment>\n          <Comment.Avatar src=\"https://react.semantic-ui.com/images/avatar/small/matt.jpg\" />\n          <Comment.Content>\n            <Comment.Author as=\"a\" style={{ color: \"white\" }}>\n              {props.chat.type === \"group\" ? <Icon name=\"users\" /> : \"\"}\n              {props.title}\n            </Comment.Author>\n            <Comment.Metadata style={{ color: \"#599CAA\" }}>\n              {dayEquality(\n                props.chatTrans.data[props.chatTrans.data.length - 1].date,\n                props.dbFunc.Timestamp.now()\n              )\n                ? parseTime(\n                    props.chatTrans.data[props.chatTrans.data.length - 1].date\n                  )\n                : parseDate(\n                    props.chatTrans.data[props.chatTrans.data.length - 1].date\n                  )}\n            </Comment.Metadata>\n            <Comment.Text\n              style={{\n                height: \"16px\",\n                color: \"#599CAA\",\n              }}\n            >\n              {\" \"}\n              <div\n                style={{\n                  display: \"flex\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                }}\n              >\n                <div style={{ color: \"#98D1CE\", marginRight: \"5px\" }}>\n                  {props.chatTrans.data[props.chatTrans.data.length - 1].author\n                    .id === props.user\n                    ? \"You:\"\n                    : props.chatTrans.data[props.chatTrans.data.length - 1]\n                        .name + \":\"}\n                </div>\n                <div\n                  style={{\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\",\n                  }}\n                >\n                  {\n                    props.chatTrans.data[props.chatTrans.data.length - 1]\n                      .content\n                  }\n                </div>\n              </div>\n            </Comment.Text>\n          </Comment.Content>\n        </Comment>\n      </Comment.Group>\n    </Menu.Item>\n  );\n};\n\nexport default Navitem;\n","import React from \"react\";\n\nimport { Input, Menu, Form, Icon } from \"semantic-ui-react\";\n\nimport Navitem from \"./Navitem\";\n\nimport \"./Sidebar.css\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Nav = (props) => {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        flex: 1,\n        height: \"100%\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          alignContent: \"center\",\n          padding: \"5px\",\n          background: \"#093748\",\n          color: \"#888BA5\",\n        }}\n      >\n        <Icon\n          name=\"content\"\n          size=\"large\"\n          onClick={() => {\n            props.setVisible(true);\n          }}\n          style={{\n            marginLeft: \"10px\",\n            marginRight: \"16px\",\n          }}\n        />\n        <Form style={{ flexGrow: \"1\", height: \"38px\" }}>\n          <Input\n            transparent\n            style={{ height: \"38px\", textColor: \"white\" }}\n            color=\"white\"\n            placeholder=\"Search\"\n          />\n        </Form>\n      </div>\n      <Menu\n        secondary\n        vertical\n        fluid\n        style={{\n          marginTop: \"0px\",\n          flex: \"1\",\n          overflowY: \"auto\",\n          background: \"#081F2D\",\n        }}\n      >\n        {props.chats.map((chat) => {\n          if (\n            props.chatsTrans.chats.find((i) => chat.chatID === i.chatID) !==\n            undefined\n          ) {\n            if (chat.type === \"private\") {\n              let chatOther = chat.users.find((i) => i.id !== props.user);\n              let user = props.users.find((i) => i.userID === chatOther.id);\n              if (user !== undefined) {\n                var title = user.name;\n              }\n            } else {\n              var title = chat.title;\n            }\n            return (\n              <Navitem\n                chat={chat}\n                chatTrans={props.chatsTrans.chats.find(\n                  (i) => chat.chatID === i.chatID\n                )}\n                user={props.user}\n                users={props.users}\n                setActiveChat={props.setActiveChat}\n                activeChat={props.activeChat}\n                title={title}\n                key={uniqid()}\n                dbFunc={props.dbFunc}\n              />\n            );\n          }\n        })}\n      </Menu>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport { parseTime } from \"./Time\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nconst Message = (props) => {\n  return (\n    <Comment>\n      <Comment.Avatar src=\"https://react.semantic-ui.com/images/avatar/small/matt.jpg\" />\n      <Comment.Content>\n        <Comment.Author as=\"a\" style={{ color: \"#98D1CE\" }}>\n          {props.data.name}\n        </Comment.Author>\n        <Comment.Metadata style={{ color: \"#599CAA\" }}>\n          <div>{parseTime(props.data.date)}</div>\n        </Comment.Metadata>\n        <Comment.Text style={{ color: \"white\" }}>\n          {props.data.content === \"\" ? <br /> : props.data.content}\n        </Comment.Text>\n      </Comment.Content>\n    </Comment>\n  );\n};\n\nexport default Message;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nimport Message from \"./Message\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Chat = (props) => {\n  const [feed, setFeed] = useState({ chatID: \"\", data: [] });\n  useEffect(() => {\n    if (props.chatsTrans.chats.find((i) => i.chatID === props.activeChat)) {\n      setFeed(\n        props.chatsTrans.chats.find((i) => i.chatID === props.activeChat)\n      );\n    }\n  }, [props.activeChat, props.chatsTrans]);\n  useEffect(() => {\n    document.getElementById(\"chatbottom\").scrollIntoView();\n  });\n  return (\n    <div\n      style={{\n        padding: \"5px\",\n        width: \"100%\",\n      }}\n    >\n      <Comment.Group>\n        {feed.data.map((i) => {\n          return <Message key={uniqid()} data={i} db={props.db} />;\n        })}\n        <div id=\"chatbottom\"></div>\n      </Comment.Group>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Modal, Button, List, Form } from \"semantic-ui-react\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Groupcontacts = (props) => {\n  const [contacts, setContacts] = useState([]);\n  const [selectedContacts, setSelectedContacts] = useState([]);\n  useEffect(() => {\n    if (props.user !== undefined) {\n      props.db\n        .collection(\"users\")\n        .doc(props.user)\n        .get()\n        .then((doc) => {\n          const contactGets = doc\n            .data()\n            .contacts.map((contact) => contact.get());\n          Promise.all(contactGets).then((result) => {\n            setContacts(\n              result.map((contact) => {\n                return { name: contact.data().name, id: contact.id };\n              })\n            );\n          });\n        });\n    }\n  }, [props.open]);\n  const handleClick = (contact) => {\n    if (selectedContacts.find((i) => i.id === contact.id)) {\n      setSelectedContacts(selectedContacts.filter((i) => i.id !== contact.id));\n    } else {\n      setSelectedContacts(selectedContacts.concat(contact));\n    }\n  };\n  const createGroupChat = () => {\n    props.db\n      .collection(\"chats\")\n      .add({\n        title: props.groupAddName,\n        type: \"group\",\n        users: [],\n      })\n      .then((result) => {\n        props.db.collection(result.id).add({\n          name: props.name,\n          author: props.db.doc(\"/users/\" + props.user),\n          date: props.dbFunc.Timestamp.now(),\n          content: \"This is the first message.\",\n        });\n        props.db\n          .collection(\"users\")\n          .doc(props.user)\n          .update({\n            chats: props.dbFunc.FieldValue.arrayUnion(result.id),\n          });\n        props.db\n          .collection(\"chats\")\n          .doc(result.id)\n          .update({\n            users: props.dbFunc.FieldValue.arrayUnion(\n              props.db.doc(\"/users/\" + props.user)\n            ),\n          });\n        selectedContacts.forEach((i) => {\n          props.db\n            .collection(\"chats\")\n            .doc(result.id)\n            .update({\n              users: props.dbFunc.FieldValue.arrayUnion(\n                props.db.doc(\"/users/\" + i.id)\n              ),\n            });\n          props.db\n            .collection(\"users\")\n            .doc(i.id)\n            .update({\n              chats: props.dbFunc.FieldValue.arrayUnion(result.id),\n            });\n        });\n      });\n  };\n  return (\n    <Modal open={props.open} size=\"mini\">\n      <Modal.Header>Add Members:</Modal.Header>\n      <Modal.Content>\n        <Form>\n          {\" \"}\n          <Form.Input\n            fluid\n            icon=\"search\"\n            iconPosition=\"left\"\n            placeholder=\"Search\"\n            onChange={(e) => {}}\n          />\n        </Form>\n        <List selection>\n          {contacts.map((contact) => {\n            return (\n              <List.Item\n                key={uniqid()}\n                active={selectedContacts.find((i) => i.id === contact.id)}\n                onClick={(e) => {\n                  handleClick(contact);\n                }}\n              >\n                {contact.name}\n              </List.Item>\n            );\n          })}\n        </List>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={() => {\n            props.setGroupContacts(false);\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            createGroupChat(selectedContacts);\n            props.setGroupContacts(false);\n          }}\n          primary\n        >\n          Create\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default Groupcontacts;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Form } from \"semantic-ui-react\";\n\nimport \"./styles.css\";\n\nimport Chat from \"./Chat\";\nimport Groupcontacts from \"./Groupcontacts\";\n\nconst Main = (props) => {\n  const [chatTitle, setChatTitle] = useState(\" \");\n  const [chatDescription, setChatDescription] = useState();\n  const handleSend = (e) => {\n    e.preventDefault();\n    props.db\n      .collection(props.activeChat)\n      .add({\n        name: props.name,\n        author: props.db.doc(\"/users/\" + props.user),\n        date: props.dbFunc.Timestamp.now(),\n        content: e.target.reply.value,\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n      })\n      .then(() => {\n        e.target.reply.value = \"\";\n      });\n  };\n  const popUpContactAdd = () => {};\n  useEffect(() => {\n    const activeChatObject = props.chats.find(\n      (i) => i.chatID === props.activeChat\n    );\n    if (activeChatObject !== undefined) {\n      switch (activeChatObject.type) {\n        case \"private\":\n          let chatOther = activeChatObject.users.find(\n            (i) => i.id !== props.user\n          );\n          if (\n            props.users.find((i) => i.userID === chatOther.id) !== undefined\n          ) {\n            setChatTitle(\n              props.users.find((i) => i.userID === chatOther.id).name\n            );\n          }\n          setChatDescription(\"last seen some time ago\");\n          break;\n        case \"group\":\n          setChatTitle(activeChatObject.title);\n          setChatDescription(activeChatObject.users.length + \" members\");\n          break;\n        default:\n          break;\n      }\n    }\n  });\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        flex: 1,\n        height: \"100%\",\n      }}\n    >\n      <div style={{ padding: \"5px\", background: \"#093748\" }}>\n        <b style={{ color: \"white\" }}>{chatTitle}</b>\n        <div style={{ color: \"#98D1CE\" }}>{chatDescription}</div>\n      </div>\n      <div\n        style={{\n          flex: 1,\n          overflowY: \"scroll\",\n          color: \"white\",\n        }}\n      >\n        <Chat chatsTrans={props.chatsTrans} activeChat={props.activeChat} />\n      </div>\n      <div\n        style={{\n          flex: \"0 0 auto\",\n          height: \"40px\",\n        }}\n      >\n        {\" \"}\n        <Form\n          onSubmit={handleSend}\n          style={{ marginLeft: \"10px\", height: \"40px\" }}\n        >\n          <Form.Input\n            transparent\n            style={{ height: \"40px\" }}\n            id=\"reply\"\n            name=\"reply\"\n            placeholder=\"Write a message...\"\n          />\n        </Form>\n      </div>\n\n      <Groupcontacts />\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useState } from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Modal, Form, Button, Segment, Message } from \"semantic-ui-react\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst Newuser = (props) => {\n  const [email, setEmail] = useState();\n  const [name, setName] = useState();\n  const [password, setPassword] = useState();\n  const [formError, setFormError] = useState(false);\n  const [errorCode, setErrorCode] = useState();\n  const [errorMessage, setErrorMessage] = useState();\n  const newUserSubmit = (email, password) => {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        props.db.collection(\"users\").doc(result.user.uid).set(\n          {\n            name: name,\n            email: result.user.email,\n            chats: [],\n            contacts: [],\n            activeChat: null,\n          },\n          { merge: false }\n        );\n        props.setNewUser(false);\n        setFormError(false);\n      })\n      .catch(function (error) {\n        setFormError(true);\n        setErrorCode(error.code);\n        setErrorMessage(error.message);\n      });\n  };\n  return (\n    <Modal size=\"tiny\" open={props.open}>\n      <Modal.Content>\n        <Form onSubmit={() => newUserSubmit(email, password)} error={formError}>\n          <Segment raised>\n            <Form.Input\n              fluid\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"E-mail address\"\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"User Name\"\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Password\"\n              type=\"password\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <Message error header={errorCode} content={errorMessage}></Message>\n            <Button color=\"teal\" fluid size=\"large\">\n              Sign Up\n            </Button>\n          </Segment>\n        </Form>\n        <Message\n          onClick={() => {\n            props.setNewUser(false);\n          }}\n        >\n          Go back\n        </Message>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default Newuser;\n","import React, { useState } from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Modal, Form, Button, Segment, Message } from \"semantic-ui-react\";\n\nimport Newuser from \"./Newuser\";\n\nconst Login = (props) => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [newUser, setNewUser] = useState(false);\n  return (\n    <Modal size=\"tiny\" open={props.open}>\n      <Modal.Header>Welcome to Entropy. Please log in:</Modal.Header>\n      <Modal.Content>\n        <Form\n          onSubmit={() => props.loginSubmit(email, password)}\n          error={props.loginError}\n        >\n          <Segment raised>\n            <Form.Input\n              fluid\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"E-mail address\"\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Password\"\n              type=\"password\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <Message\n              error\n              header={props.loginErrorCode}\n              content={props.loginErrorMessage}\n            ></Message>\n            <Button color=\"teal\" fluid size=\"large\">\n              Login\n            </Button>\n          </Segment>\n        </Form>\n        <Segment raised>\n          <Button\n            color=\"teal\"\n            fluid\n            size=\"large\"\n            onClick={props.googleLoginSubmit}\n          >\n            Login with Google\n          </Button>\n        </Segment>\n        <Message>\n          Don't have an account?{\" \"}\n          <a\n            onClick={() => {\n              setNewUser(true);\n            }}\n          >\n            Sign Up\n          </a>\n          <Newuser open={newUser} db={props.db} setNewUser={setNewUser} />\n        </Message>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default Login;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Modal, Button, List } from \"semantic-ui-react\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Approveadd = (props) => {\n  const [contactSelect, setContactSelect] = useState({ id: null });\n  const approveContact = (contact) => {\n    if (contact.id !== null) {\n      props.db\n        .collection(\"users\")\n        .doc(props.user)\n        .get()\n        .then((doc) => {\n          const contactGets = doc.data().contacts.map((i) => i.get());\n          Promise.all(contactGets).then((result) => {\n            props.db\n              .collection(\"users\")\n              .doc(props.user)\n              .set(\n                {\n                  contacts: result.concat(contact).map((i) => i.ref),\n                },\n                { merge: true }\n              );\n          });\n          props.setAddRequests(\n            props.addRequests.filter((i) => i.id !== contact.id)\n          );\n        });\n      props.db\n        .collection(\"users\")\n        .doc(contact.id)\n        .get()\n        .then((doc) => {\n          const contactGets = doc.data().contacts.map((i) => i.get());\n          Promise.all(contactGets).then((result) => {\n            props.db\n              .collection(\"users\")\n              .doc(contact.id)\n              .set(\n                {\n                  contacts: result.concat(\n                    props.db.collection(\"users\").doc(props.user)\n                  ),\n                },\n                { merge: true }\n              );\n          });\n        });\n    }\n  };\n  const rejectContact = (contact) => {\n    if (contact !== undefined) {\n      props.setAddRequests(\n        props.addRequests.filter((i) => i.id !== contact.id)\n      );\n    }\n  };\n  useEffect(() => {\n    if (props.user !== undefined) {\n      props.db\n        .collection(\"users\")\n        .doc(props.user)\n        .set(\n          {\n            addrequests: props.addRequests.map((request) =>\n              props.db.collection(\"users\").doc(request.id)\n            ),\n          },\n          { merge: true }\n        );\n    }\n  }, [props.addRequests]);\n  return (\n    <Modal open={props.approveAddOpen}>\n      <List selection>\n        {props.addRequests.map((request) => {\n          return (\n            <List.Item\n              key={uniqid()}\n              id={request.id}\n              active={contactSelect.id === request.id}\n              onClick={(e) => {\n                setContactSelect(request);\n              }}\n            >\n              {request.data().name}\n            </List.Item>\n          );\n        })}\n      </List>\n      <Button\n        onClick={() => {\n          approveContact(contactSelect);\n        }}\n      >\n        Approve\n      </Button>\n      <Button\n        onClick={() => {\n          rejectContact(contactSelect);\n        }}\n      >\n        Reject\n      </Button>\n      <Button\n        onClick={() => {\n          props.setApproveAddOpen(false);\n        }}\n      >\n        Dismiss\n      </Button>\n    </Modal>\n  );\n};\n\nexport default Approveadd;\n","import React, { useState } from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Modal, Form, Button } from \"semantic-ui-react\";\n\nconst Addcontact = (props) => {\n  const [email, setEmail] = useState();\n  const sendRequest = (email) => {\n    props.db\n      .collection(\"users\")\n      .where(\"email\", \"==\", email)\n      .get()\n      .then((querySnapshot) => {\n        if (!querySnapshot.empty) {\n          if (props.contacts.some((i) => i.id === querySnapshot.docs[0].id)) {\n            console.log(\"You already have that contact.\");\n          } else {\n            props.db\n              .collection(\"users\")\n              .doc(querySnapshot.docs[0].id)\n              .set(\n                {\n                  addrequests: querySnapshot.docs[0]\n                    .data()\n                    .addrequests.concat(\n                      props.db.collection(\"users\").doc(props.user)\n                    ),\n                },\n                { merge: true }\n              );\n          }\n        } else {\n          console.log(\"That email doesn't exist.\");\n        }\n      });\n    props.setAddContactOpen(false);\n  };\n  return (\n    <Modal open={props.addContactOpen} size=\"mini\">\n      <Modal.Header>Add Contact:</Modal.Header>\n      <Modal.Content>\n        <Form\n          onSubmit={() => {\n            sendRequest(email);\n          }}\n        >\n          <Form.Input\n            fluid\n            icon=\"user\"\n            iconPosition=\"left\"\n            placeholder=\"E-mail address\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n        </Form>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={() => {\n            props.setAddContactOpen(false);\n          }}\n        >\n          Cancel\n        </Button>\n        <Button primary>Send Request</Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default Addcontact;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Modal, Button, List } from \"semantic-ui-react\";\n\nimport Addcontact from \"./Addcontact\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Contacts = (props) => {\n  const [contacts, setContacts] = useState([]);\n  const [addContactOpen, setAddContactOpen] = useState(false);\n  const startPrivateChat = (user) => {\n    let privateChatExists = [];\n    const chatGets = props.chats.map((chat) =>\n      props.db.collection(\"chats\").doc(chat.chatID).get()\n    );\n    Promise.all(chatGets).then((result) => {\n      privateChatExists = result.filter((i) => {\n        return (\n          i.data().type === \"private\" &&\n          i.data().users.some((j) => user.id === j.id)\n        );\n      });\n      if (privateChatExists.length === 0) {\n        props.db\n          .collection(\"chats\")\n          .add({\n            type: \"private\",\n            users: [\n              props.db.doc(\"/users/\" + props.user),\n              props.db.doc(\"/users/\" + user.id),\n            ],\n          })\n          .then((result) => {\n            props.db.collection(result.id).add({\n              name: props.name,\n              author: props.db.doc(\"/users/\" + props.user),\n              date: props.dbFunc.Timestamp.now(),\n              content: \"This is the first message.\",\n            });\n            props.db\n              .collection(\"users\")\n              .doc(props.user)\n              .set(\n                {\n                  chats: props.chats.map((i) => i.chatID).concat(result.id),\n                },\n                { merge: true }\n              );\n            props.db\n              .collection(\"users\")\n              .doc(user.id)\n              .set(\n                {\n                  chats: props.chats.map((i) => i.chatID).concat(result.id),\n                },\n                { merge: true }\n              );\n          });\n      } else {\n        props.setActiveChat(privateChatExists[0].id);\n        props.setOpenContacts(false);\n      }\n    });\n  };\n  useEffect(() => {\n    if (props.user !== undefined) {\n      props.db\n        .collection(\"users\")\n        .doc(props.user)\n        .get()\n        .then((doc) => {\n          const contactGets = doc\n            .data()\n            .contacts.map((contact) => contact.get());\n          Promise.all(contactGets).then((result) => {\n            setContacts(\n              result.map((contact) => {\n                return { name: contact.data().name, id: contact.id };\n              })\n            );\n          });\n        });\n    }\n  }, [props.open]);\n  return (\n    <Modal open={props.open} size=\"mini\">\n      <Modal.Header>Contacts</Modal.Header>\n      <Modal.Content>\n        <List selection>\n          {contacts.map((contact) => {\n            return (\n              <List.Item\n                key={uniqid()}\n                onClick={(e) => {\n                  startPrivateChat(contact);\n                }}\n              >\n                {contact.name}\n              </List.Item>\n            );\n          })}\n        </List>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={() => {\n            setAddContactOpen(true);\n          }}\n          primary\n        >\n          Add Contact\n        </Button>\n        <Button\n          onClick={() => {\n            props.setOpenContacts(false);\n          }}\n        >\n          Close\n        </Button>\n      </Modal.Actions>\n      <Addcontact\n        db={props.db}\n        user={props.user}\n        contacts={contacts}\n        addContactOpen={addContactOpen}\n        setAddContactOpen={setAddContactOpen}\n      />\n    </Modal>\n  );\n};\n\nexport default Contacts;\n","import React, { useState } from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Modal, Form, Button, List } from \"semantic-ui-react\";\n\nconst Addgroup = (props) => {\n  const [group, setGroup] = useState(\"\");\n  return (\n    <Modal open={props.open} size=\"mini\">\n      <Modal.Header>Add Group</Modal.Header>\n      <Modal.Content>\n        <Form onSubmit={() => {}}>\n          <Form.Input\n            fluid\n            icon=\"group\"\n            iconPosition=\"left\"\n            placeholder=\"Group name\"\n            onChange={(e) => {\n              setGroup(e.target.value);\n            }}\n          />\n        </Form>\n        <List></List>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={() => {\n            props.setAddGroup(false);\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            if (group.length > 0) {\n              props.setGroupAddName(group);\n              props.setGroupContacts(true);\n              props.setAddGroup(false);\n            }\n          }}\n          primary\n        >\n          Next\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default Addgroup;\n","import React, { useState, useEffect, useReducer } from \"react\";\n\nimport \"./App.css\";\n\nimport Nav from \"./Nav\";\nimport Main from \"./Main\";\nimport Login from \"./Login\";\nimport Approveadd from \"./Approveadd\";\nimport Contacts from \"./Contacts\";\nimport Addgroup from \"./Addgroup\";\nimport Groupcontacts from \"./Groupcontacts\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Menu, Icon, Sidebar } from \"semantic-ui-react\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCiemC3RJx8s3kHs4Y2SasrhG_epoQjEDw\",\n  authDomain: \"entropy-messenger.firebaseapp.com\",\n  databaseURL: \"https://entropy-messenger.firebaseio.com\",\n  projectId: \"entropy-messenger\",\n  storageBucket: \"entropy-messenger.appspot.com\",\n  messagingSenderId: \"739103714260\",\n  appId: \"1:739103714260:web:9f34197363bb3b2e4dc441\",\n  measurementId: \"G-WNTGXPFSRH\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar db = firebase.firestore();\nvar dbFunc = firebase.firestore;\n\nconst App = () => {\n  const [user, setUser] = useState();\n  const [name, setName] = useState();\n  const [chatIDs, setChatIDs] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [activeChat, setActiveChat] = useState();\n  const [loginOpen, setLoginOpen] = useState(true);\n  const [loginError, setLoginError] = useState(false);\n  const [loginErrorCode, setLoginErrorCode] = useState(\"\");\n  const [loginErrorMessage, setLoginErrorMessage] = useState(\"\");\n  const [approveAddOpen, setApproveAddOpen] = useState(false);\n  const [addRequests, setAddRequests] = useState([]);\n  const [openContacts, setOpenContacts] = useState(false);\n  const [addGroup, setAddGroup] = useState(false);\n  const [groupContacts, setGroupContacts] = useState(false);\n  const [groupAddName, setGroupAddName] = useState(\"This is the wrong name\");\n  const [groupAddContacts, setGroupAddContacts] = useState([]);\n\n  const [visible, setVisible] = useState(false);\n\n  const [chatsData, chatsDataUpdate] = useReducer(\n    (state, action) => {\n      return {\n        chats: state.chats\n          .filter((i) => i.chatID !== action.chatID)\n          .concat({\n            title: action.title,\n            type: action.type,\n            users: action.users,\n            chatID: action.chatID,\n          }),\n      };\n    },\n    { chats: [] }\n  );\n  const [chatsTrans, chatsTransUpdate] = useReducer(\n    (state, action) => {\n      return {\n        chats: state.chats\n          .filter((i) => i.chatID !== action.chatID)\n          .concat({ chatID: action.chatID, data: action.data }),\n      };\n    },\n    { chats: [] }\n  );\n  useEffect(() => {\n    if (user !== undefined) {\n      const query = db.collection(\"users\").doc(user);\n      query.get().then((doc) => {\n        setActiveChat(doc.data().activeChat);\n        const chatGets = doc\n          .data()\n          .chats.map((chat) => db.collection(\"chats\").doc(chat).get());\n        Promise.all(chatGets).then((results) => {\n          const userGets = results\n            .map((i) => i.data().users)\n            .flat()\n            .filter((i) => i.id !== user)\n            .map((i) => i.get());\n          Promise.all(userGets).then((users) => {\n            setUsers(\n              users.map((j) => {\n                return {\n                  name: j.data().name,\n                  email: j.data().email,\n                  userID: j.id,\n                };\n              })\n            );\n          });\n        });\n      });\n    }\n  }, [user]);\n  const activeChatCallback = (chat) => {\n    setActiveChat(chat);\n    db.collection(\"users\").doc(user).set({ activeChat: chat }, { merge: true });\n  };\n  const loginDataLoad = (result) => {\n    const userRef = db.collection(\"users\").doc(result.user.uid);\n    userRef\n      .get()\n      .then((doc) => {\n        if (doc.exists) {\n          setUser(result.user.uid);\n          setName(result.user.displayName);\n          userRef.onSnapshot((snapshot) => {\n            handleUserUpdate(snapshot);\n          });\n        } else {\n          db.collection(\"users\").doc(result.user.uid).set(\n            {\n              name: result.user.displayName,\n              email: result.user.email,\n              chats: [],\n              contacts: [],\n              activeChat: null,\n              addrequests: [],\n            },\n            { merge: false }\n          );\n        }\n      })\n      .then(() => {\n        setLoginOpen(false);\n        setLoginError(false);\n      });\n  };\n  const loginSubmitCallback = (email, password) => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then((result) => loginDataLoad(result));\n  };\n  const googleLoginSubmitCallback = () => {\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then((result) => loginDataLoad(result));\n  };\n  const handleUserUpdate = (snapshot) => {\n    handleAddRequests(snapshot.data().addrequests);\n    handleChats(snapshot.data().chats);\n  };\n  const handleChats = (chatIDs) => {\n    setChatIDs(chatIDs);\n  };\n  useEffect(() => {\n    chatIDs\n      .filter((i) => !chatsData.chats.find((j) => j.chatID === i))\n      .forEach((chatID) => {\n        db.collection(\"chats\")\n          .doc(chatID)\n          .onSnapshot((result) => {\n            chatsDataUpdate({\n              title: result.data().title,\n              type: result.data().type,\n              users: result.data().users,\n              chatID: result.id,\n            });\n          });\n        const query = db.collection(chatID).orderBy(\"date\", \"asc\");\n        query.onSnapshot((querySnapshot) => {\n          const data = querySnapshot.docs.map((doc) => doc.data());\n          Promise.resolve().then(() => {\n            chatsTransUpdate({ chatID: chatID, data: data });\n          });\n        });\n      });\n  }, [chatIDs]);\n  const handleAddRequests = (requests) => {\n    if (requests.length > 0) {\n      const contactGets = requests.map((request) => request.get());\n      Promise.all(contactGets).then((results) => {\n        setAddRequests(results);\n      });\n      setApproveAddOpen(true);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"#0A0F14\",\n        color: \"white\",\n      }}\n    >\n      <Sidebar.Pushable>\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          icon=\"labeled\"\n          inverted\n          vertical\n          visible={visible}\n          width=\"thin\"\n        >\n          <Menu.Item\n            as=\"a\"\n            onClick={() => {\n              setAddGroup(true);\n              setVisible(false);\n            }}\n          >\n            <Icon name=\"group\" />\n            New Group\n          </Menu.Item>\n          <Menu.Item\n            as=\"a\"\n            onClick={() => {\n              setOpenContacts(true);\n              setVisible(false);\n            }}\n          >\n            <Icon name=\"user\" />\n            Contacts\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher dimmed={visible}>\n          {\" \"}\n          <div\n            style={{\n              position: \"absolute\",\n              width: \"30%\",\n              height: \"100%\",\n              overflowY: \"auto\",\n            }}\n          >\n            <Nav\n              db={db}\n              dbFunc={dbFunc}\n              user={user}\n              name={name}\n              users={users}\n              chats={chatsData.chats}\n              chatsTrans={chatsTrans}\n              setActiveChat={activeChatCallback}\n              activeChat={activeChat}\n              setVisible={setVisible}\n            />\n          </div>\n          <div\n            style={{\n              position: \"fixed\",\n              left: \"30%\",\n              width: \"70%\",\n              height: \"100%\",\n            }}\n          >\n            <Main\n              db={db}\n              dbFunc={dbFunc}\n              user={user}\n              name={name}\n              activeChat={activeChat}\n              chats={chatsData.chats}\n              users={users}\n              chatsTrans={chatsTrans}\n            />\n          </div>\n          <Login\n            open={loginOpen}\n            loginSubmit={loginSubmitCallback}\n            googleLoginSubmit={googleLoginSubmitCallback}\n            db={db}\n            loginError={loginError}\n            loginErrorCode={loginErrorCode}\n            loginErrorMessage={loginErrorMessage}\n          />\n          <Approveadd\n            db={db}\n            user={user}\n            approveAddOpen={approveAddOpen}\n            setApproveAddOpen={setApproveAddOpen}\n            addRequests={addRequests}\n            setAddRequests={setAddRequests}\n          />\n          <Contacts\n            open={openContacts}\n            db={db}\n            user={user}\n            setOpenContacts={setOpenContacts}\n            chats={chatsData.chats}\n            setActiveChat={setActiveChat}\n            dbFunc={dbFunc}\n            name={name}\n          />\n          <Addgroup\n            open={addGroup}\n            setAddGroup={setAddGroup}\n            setGroupContacts={setGroupContacts}\n            setGroupAddName={setGroupAddName}\n          />\n          <Groupcontacts\n            open={groupContacts}\n            name={name}\n            setGroupContacts={setGroupContacts}\n            setGroupAddContacts={setGroupAddContacts}\n            groupAddName={groupAddName}\n            user={user}\n            db={db}\n            dbFunc={dbFunc}\n          />\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}