{"version":3,"sources":["Sidebaritem.js","Sidebar.js","Message.js","Chat.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["uniqid","require","Sidebaritem","props","useState","title","setTitle","useEffect","chat","type","chatOther","users","filter","i","id","user","db","collection","doc","get","then","result","data","name","Menu","Item","key","active","Sidebar","secondary","vertical","chats","map","Message","Comment","Content","Author","as","Metadata","date","toDate","getHours","getMinutes","Text","content","Chat","feed","setFeed","orderBy","onSnapshot","querySnapshot","docs","Promise","resolve","Group","Main","Form","onSubmit","e","preventDefault","add","author","dbFunc","Timestamp","now","target","reply","value","catch","error","console","TextArea","placeholder","Button","floated","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","setUser","setName","setChats","provider","GoogleAuthProvider","signInWithPopup","uid","exists","displayName","set","email","merge","undefined","forEach","concat","Grid","Column","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.14116e6a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Input, Label, Menu } from \"semantic-ui-react\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Sidebaritem = (props) => {\n  const [title, setTitle] = useState();\n  useEffect(() => {\n    switch (props.chat.type) {\n      case \"private\":\n        let chatOther = props.chat.users.filter((i) => i.id !== props.user);\n        props.db\n          .collection(\"users\")\n          .doc(chatOther[0].id)\n          .get()\n          .then((result) => {\n            setTitle(result.data().name);\n          });\n        break;\n      default:\n        break;\n    }\n  }, [props.chat]);\n  return <Menu.Item key={uniqid()} name={title} active={true} />;\n};\n\nexport default Sidebaritem;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Input, Label, Menu } from \"semantic-ui-react\";\n\nimport Sidebaritem from \"./Sidebaritem\";\n\nimport \"./Sidebar.css\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Sidebar = (props) => {\n  const [activeItem, setActiveItem] = useState(\"Test 1\");\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n  return (\n    <Menu secondary vertical>\n      {props.chats.map((i) => {\n        return <Sidebaritem chat={i} db={props.db} user={props.user} />;\n      })}\n    </Menu>\n  );\n};\n\nexport default Sidebar;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nconst Message = (props) => {\n  return (\n    <Comment>\n      <Comment.Content>\n        <Comment.Author as=\"a\">{props.data.name}</Comment.Author>\n        <Comment.Metadata>\n          <div>\n            {props.data.date.toDate().getHours() +\n              \":\" +\n              props.data.date.toDate().getMinutes()}\n          </div>\n        </Comment.Metadata>\n        <Comment.Text>{props.data.content}</Comment.Text>\n      </Comment.Content>\n    </Comment>\n  );\n};\n\nexport default Message;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nimport Message from \"./Message\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Chat = (props) => {\n  const [feed, setFeed] = useState([]);\n\n  useEffect(() => {\n    const query = props.db\n      .collection(\"6XXpczgGdrSBUf0Gb5Nt\")\n      .orderBy(\"date\", \"asc\");\n    query.onSnapshot((querySnapshot) => {\n      const data = querySnapshot.docs.map((doc) => doc.data());\n      Promise.resolve().then(() => {\n        setFeed(data);\n      });\n    });\n  }, []);\n\n  return (\n    <Comment.Group>\n      {feed.map((i) => {\n        return <Message key={uniqid()} data={i} db={props.db} />;\n      })}\n    </Comment.Group>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\n\nimport { Form, TextArea, Button } from \"semantic-ui-react\";\n\nimport \"./Main.css\";\n\nimport Chat from \"./Chat\";\n\nconst Main = (props) => {\n  const handleSend = (e) => {\n    e.preventDefault();\n    props.db\n      .collection(\"6XXpczgGdrSBUf0Gb5Nt\")\n      .add({\n        name: props.name,\n        author: props.db.doc(\"/users/\" + props.user),\n        date: props.dbFunc.Timestamp.now(),\n        content: e.target.reply.value,\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n      })\n      .then(() => {\n        e.target.reply.value = \"\";\n      });\n  };\n\n  return (\n    <div>\n      <Chat db={props.db} />\n      <Form onSubmit={handleSend}>\n        <TextArea id=\"reply\" name=\"reply\" placeholder=\"Reply\" />\n        <Button type=\"submit\" floated=\"right\">\n          Send\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport Sidebar from \"./Sidebar\";\nimport Main from \"./Main\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Grid } from \"semantic-ui-react\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCiemC3RJx8s3kHs4Y2SasrhG_epoQjEDw\",\n  authDomain: \"entropy-messenger.firebaseapp.com\",\n  databaseURL: \"https://entropy-messenger.firebaseio.com\",\n  projectId: \"entropy-messenger\",\n  storageBucket: \"entropy-messenger.appspot.com\",\n  messagingSenderId: \"739103714260\",\n  appId: \"1:739103714260:web:9f34197363bb3b2e4dc441\",\n  measurementId: \"G-WNTGXPFSRH\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar db = firebase.firestore();\nvar dbFunc = firebase.firestore;\n\nconst App = () => {\n  const [user, setUser] = useState();\n  const [name, setName] = useState();\n  const [chats, setChats] = useState([]);\n  useEffect(() => {\n    //Initialize Firebase Auth\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then(function (result) {\n        const userRef = db.collection(\"users\").doc(result.user.uid);\n        userRef.get().then((doc) => {\n          if (doc.exists) {\n            setUser(result.user.uid);\n            setName(result.user.displayName);\n          } else {\n            db.collection(\"users\").doc(result.user.uid).set(\n              {\n                name: result.user.displayName,\n                email: result.user.email,\n                chats: [],\n              },\n              { merge: false }\n            );\n          }\n        });\n      });\n  }, []);\n  useEffect(() => {\n    if (user !== undefined) {\n      const query = db.collection(\"users\").doc(user);\n      query.get().then((doc) => {\n        doc.data().chats.forEach((i) => {\n          db.collection(\"chats\")\n            .doc(i)\n            .get()\n            .then((result) => {\n              setChats(chats.concat(result.data()));\n            });\n        });\n      });\n    }\n  }, [user]);\n  return (\n    <Grid>\n      <Grid.Column width={3}>\n        <Sidebar db={db} dbFunc={dbFunc} user={user} chats={chats} />\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <Main db={db} dbFunc={dbFunc} user={user} name={name} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}