{"version":3,"sources":["Sidebaritem.js","Addcontact.js","Contacts.js","Sidebar.js","Message.js","Chat.js","Main.js","Newuser.js","Login.js","Approveadd.js","App.js","serviceWorker.js","index.js"],"names":["Sidebaritem","props","useState","title","setTitle","useEffect","chat","type","chatOther","users","filter","i","id","user","db","collection","doc","get","then","result","data","name","Menu","Item","onClick","setActiveChat","chatID","active","activeChat","Addcontact","email","setEmail","Modal","open","addContactOpen","Header","Content","Form","onSubmit","where","querySnapshot","empty","docs","set","addrequests","concat","merge","setAddContactOpen","sendRequest","Segment","raised","Input","fluid","icon","iconPosition","placeholder","onChange","e","target","value","Button","uniqid","require","Contacts","contacts","setContacts","undefined","contactGets","map","contact","Promise","all","List","selection","key","privateChatExists","chatGets","chats","some","j","length","add","author","date","dbFunc","Timestamp","now","content","chatIDs","setOpenContacts","startPrivateChat","Sidebar","openContacts","secondary","vertical","floated","Message","Comment","Author","as","Metadata","toDate","getHours","getMinutes","Text","Chat","feed","setFeed","orderBy","onSnapshot","resolve","Group","Main","preventDefault","reply","catch","error","console","TextArea","Newuser","setName","password","setPassword","formError","setFormError","errorCode","setErrorCode","errorMessage","setErrorMessage","size","firebase","createUserWithEmailAndPassword","uid","setNewUser","code","message","newUserSubmit","header","color","Login","newUser","loginSubmit","loginError","loginErrorCode","loginErrorMessage","googleLoginSubmit","Approveadd","contactSelect","setContactSelect","addRequests","request","approveAddOpen","ref","setAddRequests","setApproveAddOpen","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","setUser","setChats","setChatIDs","loginOpen","setLoginOpen","setLoginError","setLoginErrorCode","setLoginErrorMessage","results","addAddRequstListener","Grid","Column","width","signInWithEmailAndPassword","provider","GoogleAuthProvider","signInWithPopup","exists","displayName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b24f8831.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Menu } from \"semantic-ui-react\";\n\nconst Sidebaritem = (props) => {\n  const [title, setTitle] = useState();\n  useEffect(() => {\n    switch (props.chat.type) {\n      case \"private\":\n        let chatOther = props.chat.users.filter((i) => i.id !== props.user);\n        props.db\n          .collection(\"users\")\n          .doc(chatOther[0].id)\n          .get()\n          .then((result) => {\n            setTitle(result.data().name);\n          });\n        break;\n      case \"group\":\n        setTitle(props.chat.title);\n        break;\n      default:\n        break;\n    }\n  }, [props.chat, props.db, props.user]);\n  return (\n    <Menu.Item\n      name={title}\n      onClick={() => {\n        props.setActiveChat(props.chat.chatID);\n      }}\n      active={props.chat.chatID === props.activeChat}\n    />\n  );\n};\n\nexport default Sidebaritem;\n","import React, { useState } from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Modal, Form, Button, Segment, Message } from \"semantic-ui-react\";\n\nconst Addcontact = (props) => {\n  const [email, setEmail] = useState();\n  const sendRequest = (email) => {\n    props.db\n      .collection(\"users\")\n      .where(\"email\", \"==\", email)\n      .get()\n      .then((querySnapshot) => {\n        if (!querySnapshot.empty) {\n          props.db\n            .collection(\"users\")\n            .doc(querySnapshot.docs[0].id)\n            .set(\n              {\n                addrequests: querySnapshot.docs[0]\n                  .data()\n                  .addrequests.concat(\n                    props.db.collection(\"users\").doc(props.user)\n                  ),\n              },\n              { merge: true }\n            );\n        }\n      });\n    props.setAddContactOpen(false);\n  };\n  return (\n    <Modal open={props.addContactOpen}>\n      <Modal.Header>Add Contact:</Modal.Header>\n      <Modal.Content>\n        <Form\n          onSubmit={() => {\n            sendRequest(email);\n          }}\n        >\n          <Segment raised>\n            <Form.Input\n              fluid\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"E-mail address\"\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <Button>Send Request</Button>\n            <Button\n              onClick={() => {\n                props.setAddContactOpen(false);\n              }}\n            >\n              Cancel\n            </Button>\n          </Segment>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default Addcontact;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Modal, Button, List } from \"semantic-ui-react\";\n\nimport Addcontact from \"./Addcontact\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Contacts = (props) => {\n  const [contacts, setContacts] = useState([]);\n  const [addContactOpen, setAddContactOpen] = useState(false);\n  const startPrivateChat = (user) => {\n    let privateChatExists = [];\n    const chatGets = props.chats.map((chat) =>\n      props.db.collection(\"chats\").doc(chat.chatID).get()\n    );\n    Promise.all(chatGets).then((result) => {\n      privateChatExists = result.filter((i) => {\n        return (\n          i.data().type === \"private\" &&\n          i.data().users.some((j) => user.id === j.id)\n        );\n      });\n      if (privateChatExists.length === 0) {\n        props.db\n          .collection(\"chats\")\n          .add({\n            type: \"private\",\n            users: [\n              props.db.doc(\"/users/\" + props.user),\n              props.db.doc(\"/users/\" + user.id),\n            ],\n          })\n          .then((result) => {\n            props.db.collection(result.id).add({\n              name: props.name,\n              author: props.db.doc(\"/users/\" + props.user),\n              date: props.dbFunc.Timestamp.now(),\n              content: \"This is the first message.\",\n            });\n            props.db\n              .collection(\"users\")\n              .doc(props.user)\n              .set(\n                {\n                  chats: props.chatIDs.concat(result.id),\n                },\n                { merge: true }\n              );\n            props.db\n              .collection(\"users\")\n              .doc(user.id)\n              .set(\n                {\n                  chats: props.chatIDs.concat(result.id),\n                },\n                { merge: true }\n              );\n          });\n      } else {\n        props.setActiveChat(privateChatExists[0].id);\n        props.setOpenContacts(false);\n      }\n    });\n  };\n  useEffect(() => {\n    if (props.user !== undefined) {\n      props.db\n        .collection(\"users\")\n        .doc(props.user)\n        .get()\n        .then((doc) => {\n          const contactGets = doc\n            .data()\n            .contacts.map((contact) => contact.get());\n          Promise.all(contactGets).then((result) => {\n            setContacts(\n              result.map((contact) => {\n                return { name: contact.data().name, id: contact.id };\n              })\n            );\n          });\n        });\n    }\n  }, [props.open]);\n  return (\n    <Modal open={props.open}>\n      <List selection>\n        {contacts.map((contact) => {\n          return (\n            <List.Item\n              key={uniqid()}\n              onClick={(e) => {\n                startPrivateChat(contact);\n              }}\n            >\n              {contact.name}\n            </List.Item>\n          );\n        })}\n      </List>\n      <Button\n        onClick={() => {\n          props.setOpenContacts(false);\n        }}\n      >\n        Dismiss\n      </Button>\n      <Button\n        onClick={() => {\n          setAddContactOpen(true);\n        }}\n      >\n        Add Contact\n      </Button>\n      <Addcontact\n        db={props.db}\n        user={props.user}\n        addContactOpen={addContactOpen}\n        setAddContactOpen={setAddContactOpen}\n      />\n    </Modal>\n  );\n};\n\nexport default Contacts;\n","import React, { useState } from \"react\";\n\nimport { Input, Menu, Button, Form } from \"semantic-ui-react\";\n\nimport Sidebaritem from \"./Sidebaritem\";\nimport Contacts from \"./Contacts\";\n\nimport \"./Sidebar.css\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Sidebar = (props) => {\n  const [openContacts, setOpenContacts] = useState(false);\n  const handleForm = (e) => {\n    props.db\n      .collection(\"chats\")\n      .add({\n        title: e.target.title.value,\n        type: \"group\",\n        users: [props.db.doc(\"/users/\" + props.user)],\n      })\n      .then((result) => {\n        props.db.collection(result.id).add({\n          name: props.name,\n          author: props.db.doc(\"/users/\" + props.user),\n          date: props.dbFunc.Timestamp.now(),\n          content: \"This is the first message.\",\n        });\n        props.db\n          .collection(\"users\")\n          .doc(props.user)\n          .set(\n            {\n              chats: props.chatIDs.concat(result.id),\n            },\n            { merge: true }\n          );\n      });\n  };\n  return (\n    <Menu secondary vertical>\n      {props.chats.map((chat) => {\n        return (\n          <Sidebaritem\n            chat={chat}\n            db={props.db}\n            user={props.user}\n            setActiveChat={props.setActiveChat}\n            activeChat={props.activeChat}\n            key={uniqid()}\n          />\n        );\n      })}\n      <Form onSubmit={handleForm}>\n        <Input id=\"title\" name=\"title\" placeholder=\"Group Name\" />\n        <Button type=\"submit\" floated=\"left\">\n          New Group\n        </Button>\n      </Form>\n      <Button\n        onClick={() => {\n          setOpenContacts(true);\n        }}\n      >\n        Contacts\n      </Button>\n      <Contacts\n        open={openContacts}\n        db={props.db}\n        user={props.user}\n        setOpenContacts={setOpenContacts}\n        chats={props.chats}\n        setActiveChat={props.setActiveChat}\n        dbFunc={props.dbFunc}\n        name={props.name}\n        chatIDs={props.chatIDs}\n      />\n    </Menu>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nconst Message = (props) => {\n  return (\n    <Comment>\n      <Comment.Content>\n        <Comment.Author as=\"a\">{props.data.name}</Comment.Author>\n        <Comment.Metadata>\n          <div>\n            {props.data.date.toDate().getHours() +\n              \":\" +\n              props.data.date.toDate().getMinutes()}\n          </div>\n        </Comment.Metadata>\n        <Comment.Text>{props.data.content}</Comment.Text>\n      </Comment.Content>\n    </Comment>\n  );\n};\n\nexport default Message;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nimport Message from \"./Message\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Chat = (props) => {\n  const [feed, setFeed] = useState([]);\n\n  useEffect(() => {\n    if (props.activeChat !== undefined && props.activeChat !== null) {\n      const query = props.db\n        .collection(props.activeChat)\n        .orderBy(\"date\", \"asc\");\n      query.onSnapshot((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => doc.data());\n        Promise.resolve().then(() => {\n          setFeed(data);\n        });\n      });\n    }\n  }, [props.activeChat, props.db]);\n\n  return (\n    <Comment.Group>\n      {feed.map((i) => {\n        return <Message key={uniqid()} data={i} db={props.db} />;\n      })}\n    </Comment.Group>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\n\nimport { Form, TextArea, Button } from \"semantic-ui-react\";\n\nimport \"./Main.css\";\n\nimport Chat from \"./Chat\";\n\nconst Main = (props) => {\n  const handleSend = (e) => {\n    e.preventDefault();\n    props.db\n      .collection(props.activeChat)\n      .add({\n        name: props.name,\n        author: props.db.doc(\"/users/\" + props.user),\n        date: props.dbFunc.Timestamp.now(),\n        content: e.target.reply.value,\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n      })\n      .then(() => {\n        e.target.reply.value = \"\";\n      });\n  };\n\n  return (\n    <div>\n      <Chat db={props.db} activeChat={props.activeChat} />\n      <Form onSubmit={handleSend}>\n        <TextArea id=\"reply\" name=\"reply\" placeholder=\"Reply\" />\n        <Button type=\"submit\" floated=\"right\">\n          Send\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useEffect, useState } from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Modal, Form, Button, Segment, Message } from \"semantic-ui-react\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst Newuser = (props) => {\n  const [email, setEmail] = useState();\n  const [name, setName] = useState();\n  const [password, setPassword] = useState();\n  const [formError, setFormError] = useState(false);\n  const [errorCode, setErrorCode] = useState();\n  const [errorMessage, setErrorMessage] = useState();\n  const newUserSubmit = (email, password) => {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        props.db.collection(\"users\").doc(result.user.uid).set(\n          {\n            name: name,\n            email: result.user.email,\n            chats: [],\n            contacts: [],\n            activeChat: null,\n          },\n          { merge: false }\n        );\n        props.setNewUser(false);\n        setFormError(false);\n      })\n      .catch(function (error) {\n        setFormError(true);\n        setErrorCode(error.code);\n        setErrorMessage(error.message);\n      });\n  };\n  return (\n    <Modal size=\"tiny\" open={props.open}>\n      <Modal.Content>\n        <Form onSubmit={() => newUserSubmit(email, password)} error={formError}>\n          <Segment raised>\n            <Form.Input\n              fluid\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"E-mail address\"\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"User Name\"\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Password\"\n              type=\"password\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <Message error header={errorCode} content={errorMessage}></Message>\n            <Button color=\"teal\" fluid size=\"large\">\n              Sign Up\n            </Button>\n          </Segment>\n        </Form>\n        <Message\n          onClick={() => {\n            props.setNewUser(false);\n          }}\n        >\n          Go back\n        </Message>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default Newuser;\n","import React, { useState } from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Modal, Form, Button, Segment, Message } from \"semantic-ui-react\";\n\nimport Newuser from \"./Newuser\";\n\nconst Login = (props) => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [newUser, setNewUser] = useState(false);\n  return (\n    <Modal size=\"tiny\" open={props.open}>\n      <Modal.Header>Welcome to Entropy. Please log in:</Modal.Header>\n      <Modal.Content>\n        <Form\n          onSubmit={() => props.loginSubmit(email, password)}\n          error={props.loginError}\n        >\n          <Segment raised>\n            <Form.Input\n              fluid\n              icon=\"user\"\n              iconPosition=\"left\"\n              placeholder=\"E-mail address\"\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <Form.Input\n              fluid\n              icon=\"lock\"\n              iconPosition=\"left\"\n              placeholder=\"Password\"\n              type=\"password\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <Message\n              error\n              header={props.loginErrorCode}\n              content={props.loginErrorMessage}\n            ></Message>\n            <Button color=\"teal\" fluid size=\"large\">\n              Login\n            </Button>\n          </Segment>\n        </Form>\n        <Segment raised>\n          <Button\n            color=\"teal\"\n            fluid\n            size=\"large\"\n            onClick={props.googleLoginSubmit}\n          >\n            Login with Google\n          </Button>\n        </Segment>\n        <Message>\n          Don't have an account?{\" \"}\n          <a\n            onClick={() => {\n              setNewUser(true);\n            }}\n          >\n            Sign Up\n          </a>\n          <Newuser open={newUser} db={props.db} setNewUser={setNewUser} />\n        </Message>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default Login;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Modal, Button, List } from \"semantic-ui-react\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Approveadd = (props) => {\n  const [contactSelect, setContactSelect] = useState();\n  const approveContact = (contact) => {\n    props.db\n      .collection(\"users\")\n      .doc(props.user)\n      .get()\n      .then((doc) => {\n        const contactGets = doc.data().contacts.map((i) => i.get());\n        Promise.all(contactGets).then((result) => {\n          props.db\n            .collection(\"users\")\n            .doc(props.user)\n            .set(\n              {\n                contacts: result.concat(contact).map((i) => i.ref),\n              },\n              { merge: true }\n            );\n        });\n        props.setAddRequests(\n          props.addRequests.filter((i) => i.id !== contact.id)\n        );\n      });\n  };\n  const rejectContact = (contact) => {\n    props.setAddRequests(props.addRequests.filter((i) => i.id !== contact.id));\n  };\n  useEffect(() => {\n    if (props.user !== undefined) {\n      props.db\n        .collection(\"users\")\n        .doc(props.user)\n        .set(\n          {\n            addrequests: props.addRequests.map((request) =>\n              props.db.collection(\"users\").doc(request.id)\n            ),\n          },\n          { merge: true }\n        );\n    }\n  }, [props.addRequests]);\n  return (\n    <Modal open={props.approveAddOpen}>\n      <List selection>\n        {props.addRequests.map((request) => {\n          return (\n            <List.Item\n              key={uniqid()}\n              id={request.id}\n              onClick={(e) => {\n                setContactSelect(request);\n              }}\n            >\n              {request.data().name}\n            </List.Item>\n          );\n        })}\n      </List>\n      <Button\n        onClick={() => {\n          approveContact(contactSelect);\n        }}\n      >\n        Approve\n      </Button>\n      <Button\n        onClick={() => {\n          rejectContact(contactSelect);\n        }}\n      >\n        Reject\n      </Button>\n      <Button\n        onClick={() => {\n          props.setApproveAddOpen(false);\n        }}\n      >\n        Dismiss\n      </Button>\n    </Modal>\n  );\n};\n\nexport default Approveadd;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport Sidebar from \"./Sidebar\";\nimport Main from \"./Main\";\nimport Login from \"./Login\";\nimport Approveadd from \"./Approveadd\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Grid, Form, Button } from \"semantic-ui-react\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCiemC3RJx8s3kHs4Y2SasrhG_epoQjEDw\",\n  authDomain: \"entropy-messenger.firebaseapp.com\",\n  databaseURL: \"https://entropy-messenger.firebaseio.com\",\n  projectId: \"entropy-messenger\",\n  storageBucket: \"entropy-messenger.appspot.com\",\n  messagingSenderId: \"739103714260\",\n  appId: \"1:739103714260:web:9f34197363bb3b2e4dc441\",\n  measurementId: \"G-WNTGXPFSRH\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar db = firebase.firestore();\nvar dbFunc = firebase.firestore;\n\nconst App = () => {\n  const [user, setUser] = useState();\n  const [name, setName] = useState();\n  const [chats, setChats] = useState([]);\n  const [chatIDs, setChatIDs] = useState([]);\n  const [activeChat, setActiveChat] = useState();\n  const [loginOpen, setLoginOpen] = useState(true);\n  const [loginError, setLoginError] = useState(false);\n  const [loginErrorCode, setLoginErrorCode] = useState(\"\");\n  const [loginErrorMessage, setLoginErrorMessage] = useState(\"\");\n  const [approveAddOpen, setApproveAddOpen] = useState(false);\n  const [addRequests, setAddRequests] = useState([]);\n\n  useEffect(() => {\n    if (user !== undefined) {\n      const query = db.collection(\"users\").doc(user);\n      query.get().then((doc) => {\n        setActiveChat(doc.data().activeChat);\n        setChatIDs(doc.data().chats);\n        const chatGets = doc\n          .data()\n          .chats.map((chat) => db.collection(\"chats\").doc(chat).get());\n        Promise.all(chatGets).then((results) => {\n          setChats(\n            results.map((i) => {\n              return {\n                title: i.data().title,\n                type: i.data().type,\n                users: i.data().users,\n                chatID: i.id,\n              };\n            })\n          );\n        });\n        addAddRequstListener(user);\n      });\n    }\n  }, [user]);\n  const activeChatCallback = (chat) => {\n    setActiveChat(chat);\n  };\n  const googleLoginSubmitCallback = () => {\n    //Initialize Firebase Auth\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then(function (result) {\n        const userRef = db.collection(\"users\").doc(result.user.uid);\n        userRef\n          .get()\n          .then((doc) => {\n            if (doc.exists) {\n              setUser(result.user.uid);\n              setName(result.user.displayName);\n            } else {\n              db.collection(\"users\").doc(result.user.uid).set(\n                {\n                  name: result.user.displayName,\n                  email: result.user.email,\n                  chats: [],\n                  contacts: [],\n                  activeChat: null,\n                },\n                { merge: false }\n              );\n            }\n          })\n          .then(() => {\n            setLoginOpen(false);\n            setLoginError(false);\n          });\n      });\n  };\n  const loginSubmitCallback = (email, password) => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then((result) => {\n        setUser(result.user.uid);\n        db.collection(\"users\")\n          .doc(result.user.uid)\n          .get()\n          .then((doc) => {\n            setName(doc.data().name);\n          });\n      })\n      .then(() => {\n        setLoginOpen(false);\n        setLoginError(false);\n      })\n      .catch((error) => {\n        setLoginError(true);\n        setLoginErrorCode(error.code);\n        setLoginErrorMessage(error.message);\n      });\n  };\n  const addAddRequstListener = (user) => {\n    db.collection(\"users\")\n      .doc(user)\n      .onSnapshot((doc) => {\n        if (doc.data().addrequests.length > 0) {\n          const contactGets = doc\n            .data()\n            .addrequests.map((request) => request.get());\n          Promise.all(contactGets).then((results) => {\n            setAddRequests(results);\n          });\n          setApproveAddOpen(true);\n        }\n      });\n  };\n  const popUpContactAdd = () => {};\n  return (\n    <Grid>\n      <Grid.Column width={3}>\n        <Sidebar\n          db={db}\n          dbFunc={dbFunc}\n          user={user}\n          name={name}\n          chats={chats}\n          chatIDs={chatIDs}\n          setActiveChat={activeChatCallback}\n          activeChat={activeChat}\n        />\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <Main\n          db={db}\n          dbFunc={dbFunc}\n          user={user}\n          name={name}\n          activeChat={activeChat}\n        />\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <Form onSubmit={popUpContactAdd}>\n          <Button type=\"submit\" floated=\"left\">\n            Add Person to Chat\n          </Button>\n        </Form>\n      </Grid.Column>\n      <Login\n        open={loginOpen}\n        loginSubmit={loginSubmitCallback}\n        googleLoginSubmit={googleLoginSubmitCallback}\n        db={db}\n        loginError={loginError}\n        loginErrorCode={loginErrorCode}\n        loginErrorMessage={loginErrorMessage}\n      />\n      <Approveadd\n        db={db}\n        user={user}\n        approveAddOpen={approveAddOpen}\n        setApproveAddOpen={setApproveAddOpen}\n        addRequests={addRequests}\n        setAddRequests={setAddRequests}\n      />\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}