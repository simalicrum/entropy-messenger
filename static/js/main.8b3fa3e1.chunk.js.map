{"version":3,"sources":["Sidebar.js","Message.js","Chat.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","secondary","vertical","Item","active","onClick","Message","props","Comment","Content","Author","as","data","Metadata","date","toDate","getHours","getMinutes","Text","content","uniqid","require","Chat","feed","setFeed","useEffect","db","collection","orderBy","onSnapshot","querySnapshot","docs","map","doc","Promise","resolve","then","Group","i","key","Main","Form","onSubmit","preventDefault","add","author","user","dbFunc","Timestamp","now","target","reply","value","catch","error","console","TextArea","id","placeholder","Button","type","floated","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","setUser","setName","provider","GoogleAuthProvider","signInWithPopup","result","uid","set","displayName","email","chats","merge","log","Grid","Column","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2UA8BeA,G,OAxBC,WAAO,IAAD,EACgBC,mBAAS,UADzB,mBACbC,EADa,KACDC,EADC,KAEdC,EAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiBH,EAAcG,IACvD,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAQ,GACtB,kBAACF,EAAA,EAAKG,KAAN,CACEJ,KAAK,mBACLK,OAAuB,qBAAfT,EACRU,QAASR,IAEX,kBAACG,EAAA,EAAKG,KAAN,CACEJ,KAAK,WACLK,OAAuB,aAAfT,EACRU,QAASR,IAEX,kBAACG,EAAA,EAAKG,KAAN,CACEJ,KAAK,WACLK,OAAuB,aAAfT,EACRU,QAASR,O,6CCFFS,EAlBC,SAACC,GACf,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAQC,QAAT,KACE,kBAACD,EAAA,EAAQE,OAAT,CAAgBC,GAAG,KAAKJ,EAAMK,KAAKb,MACnC,kBAACS,EAAA,EAAQK,SAAT,KACE,6BACGN,EAAMK,KAAKE,KAAKC,SAASC,WACxB,IACAT,EAAMK,KAAKE,KAAKC,SAASE,eAG/B,kBAACT,EAAA,EAAQU,KAAT,KAAeX,EAAMK,KAAKO,YCV9BC,EAASC,EAAQ,KA0BNC,EAxBF,SAACf,GAAW,IAAD,EACEb,mBAAS,IADX,mBACf6B,EADe,KACTC,EADS,KAetB,OAZAC,qBAAU,WACMlB,EAAMmB,GACjBC,WAAW,wBACXC,QAAQ,OAAQ,OACbC,YAAW,SAACC,GAChB,IAAMlB,EAAOkB,EAAcC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIrB,UACjDsB,QAAQC,UAAUC,MAAK,WACrBZ,EAAQZ,WAGX,IAGD,kBAACJ,EAAA,EAAQ6B,MAAT,KACGd,EAAKS,KAAI,SAACM,GACT,OAAO,kBAAC,EAAD,CAASC,IAAKnB,IAAUR,KAAM0B,EAAGZ,GAAInB,EAAMmB,UCW3Cc,EA7BF,SAACjC,GAgBZ,OACE,6BACE,kBAAC,EAAD,CAAMmB,GAAInB,EAAMmB,KAChB,kBAACe,EAAA,EAAD,CAAMC,SAlBS,SAAC5C,GAClBA,EAAE6C,iBACFpC,EAAMmB,GACHC,WAAW,wBACXiB,IAAI,CACH7C,KAAMQ,EAAMR,KACZ8C,OAAQtC,EAAMmB,GAAGO,IAAI,UAAY1B,EAAMuC,MACvChC,KAAMP,EAAMwC,OAAOC,UAAUC,MAC7B9B,QAASrB,EAAEoD,OAAOC,MAAMC,QAEzBC,OAAM,SAAUC,GACfC,QAAQD,MAAM,0BAA2BA,QAQzC,kBAACE,EAAA,EAAD,CAAUC,GAAG,QAAQ1D,KAAK,QAAQ2D,YAAY,UAC9C,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,SAA9B,W,wCCHRC,gBAZuB,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMjB,IAAI5C,EAAKoC,cACLf,EAASe,YAsCES,EApCH,WAAO,IAAD,EACQ7E,qBADR,mBACToD,EADS,KACH0B,EADG,OAEQ9E,qBAFR,mBAETK,EAFS,KAEH0E,EAFG,KAwBhB,OArBAhD,qBAAU,WAER,IAAIiD,EAAW,IAAIZ,OAAca,mBACjCb,SAEGc,gBAAgBF,GAChBtC,MAAK,SAAUyC,GACdnD,EAAGC,WAAW,SAASM,IAAI4C,EAAO/B,KAAKgC,KAAKC,IAC1C,CACEhF,KAAM8E,EAAO/B,KAAKkC,YAClBC,MAAOJ,EAAO/B,KAAKmC,MACnBC,MAAO,IAET,CAAEC,OAAO,IAEXX,EAAQK,EAAO/B,KAAKgC,KACpBL,EAAQI,EAAO/B,KAAKkC,aACpBzB,QAAQ6B,IAAI,SAAUrF,GACtBwD,QAAQ6B,IAAI,SAAUtC,QAEzB,IAED,kBAACuC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaC,MAAO,GAClB,kBAAC,EAAD,OAEF,kBAACF,EAAA,EAAKC,OAAN,CAAaC,MAAO,GAClB,kBAAC,EAAD,CAAM7D,GAAIA,EAAIqB,OAAQA,EAAQD,KAAMA,EAAM/C,KAAMA,OCjDpCyF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdjD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMiD,c","file":"static/js/main.8b3fa3e1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Input, Label, Menu } from \"semantic-ui-react\";\n\nimport \"./Sidebar.css\";\n\nconst Sidebar = () => {\n  const [activeItem, setActiveItem] = useState(\"Test 1\");\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n  return (\n    <Menu secondary vertical>\n      <Menu.Item\n        name=\"Samantha Fregien\"\n        active={activeItem === \"Samantha Fregien\"}\n        onClick={handleItemClick}\n      />\n      <Menu.Item\n        name=\"Person 2\"\n        active={activeItem === \"Person 2\"}\n        onClick={handleItemClick}\n      />\n      <Menu.Item\n        name=\"Person 3\"\n        active={activeItem === \"Person 3\"}\n        onClick={handleItemClick}\n      />\n    </Menu>\n  );\n};\n\nexport default Sidebar;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nconst Message = (props) => {\n  return (\n    <Comment>\n      <Comment.Content>\n        <Comment.Author as=\"a\">{props.data.name}</Comment.Author>\n        <Comment.Metadata>\n          <div>\n            {props.data.date.toDate().getHours() +\n              \":\" +\n              props.data.date.toDate().getMinutes()}\n          </div>\n        </Comment.Metadata>\n        <Comment.Text>{props.data.content}</Comment.Text>\n      </Comment.Content>\n    </Comment>\n  );\n};\n\nexport default Message;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nimport Message from \"./Message\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Chat = (props) => {\n  const [feed, setFeed] = useState([]);\n\n  useEffect(() => {\n    const query = props.db\n      .collection(\"6XXpczgGdrSBUf0Gb5Nt\")\n      .orderBy(\"date\", \"asc\");\n    query.onSnapshot((querySnapshot) => {\n      const data = querySnapshot.docs.map((doc) => doc.data());\n      Promise.resolve().then(() => {\n        setFeed(data);\n      });\n    });\n  }, []);\n\n  return (\n    <Comment.Group>\n      {feed.map((i) => {\n        return <Message key={uniqid()} data={i} db={props.db} />;\n      })}\n    </Comment.Group>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\n\nimport { Form, TextArea, Button } from \"semantic-ui-react\";\n\nimport \"./Main.css\";\n\nimport Chat from \"./Chat\";\n\nconst Main = (props) => {\n  const handleSend = (e) => {\n    e.preventDefault();\n    props.db\n      .collection(\"6XXpczgGdrSBUf0Gb5Nt\")\n      .add({\n        name: props.name,\n        author: props.db.doc(\"/users/\" + props.user),\n        date: props.dbFunc.Timestamp.now(),\n        content: e.target.reply.value,\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n      });\n  };\n\n  return (\n    <div>\n      <Chat db={props.db} />\n      <Form onSubmit={handleSend}>\n        <TextArea id=\"reply\" name=\"reply\" placeholder=\"Reply\" />\n        <Button type=\"submit\" floated=\"right\">\n          Send\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport Sidebar from \"./Sidebar\";\nimport Main from \"./Main\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Grid } from \"semantic-ui-react\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCiemC3RJx8s3kHs4Y2SasrhG_epoQjEDw\",\n  authDomain: \"entropy-messenger.firebaseapp.com\",\n  databaseURL: \"https://entropy-messenger.firebaseio.com\",\n  projectId: \"entropy-messenger\",\n  storageBucket: \"entropy-messenger.appspot.com\",\n  messagingSenderId: \"739103714260\",\n  appId: \"1:739103714260:web:9f34197363bb3b2e4dc441\",\n  measurementId: \"G-WNTGXPFSRH\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar db = firebase.firestore();\nvar dbFunc = firebase.firestore;\n\nconst App = () => {\n  const [user, setUser] = useState();\n  const [name, setName] = useState();\n  useEffect(() => {\n    //Initialize Firebase Auth\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then(function (result) {\n        db.collection(\"users\").doc(result.user.uid).set(\n          {\n            name: result.user.displayName,\n            email: result.user.email,\n            chats: [],\n          },\n          { merge: false }\n        );\n        setUser(result.user.uid);\n        setName(result.user.displayName);\n        console.log(\"name: \", name);\n        console.log(\"user: \", user);\n      });\n  }, []);\n  return (\n    <Grid>\n      <Grid.Column width={3}>\n        <Sidebar />\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <Main db={db} dbFunc={dbFunc} user={user} name={name} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}