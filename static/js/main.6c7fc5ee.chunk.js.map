{"version":3,"sources":["Sidebaritem.js","Sidebar.js","Message.js","Chat.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["uniqid","require","Sidebaritem","props","useState","title","setTitle","useEffect","chat","type","chatOther","users","filter","i","id","user","db","collection","doc","get","then","result","data","name","Menu","Item","key","onClick","setActiveChat","chatID","active","activeChat","Sidebar","secondary","vertical","chats","map","Form","onSubmit","e","add","target","value","author","date","dbFunc","Timestamp","now","content","set","chatIDs","concat","merge","Input","placeholder","Button","floated","Message","Comment","Content","Author","as","Metadata","toDate","getHours","getMinutes","Text","Chat","feed","setFeed","console","log","undefined","orderBy","onSnapshot","querySnapshot","docs","Promise","resolve","Group","Main","preventDefault","reply","catch","error","TextArea","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","setUser","setName","setChats","setChatIDs","provider","GoogleAuthProvider","signInWithPopup","uid","exists","displayName","email","contacts","chatGets","all","results","Grid","Column","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6c7fc5ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Menu } from \"semantic-ui-react\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Sidebaritem = (props) => {\n  const [title, setTitle] = useState();\n  useEffect(() => {\n    switch (props.chat.type) {\n      case \"private\":\n        let chatOther = props.chat.users.filter((i) => i.id !== props.user);\n        props.db\n          .collection(\"users\")\n          .doc(chatOther[0].id)\n          .get()\n          .then((result) => {\n            setTitle(result.data().name);\n          });\n        break;\n      case \"group\":\n        setTitle(props.chat.title);\n        break;\n      default:\n        break;\n    }\n  }, [props.chat]);\n  return (\n    <Menu.Item\n      key={uniqid()}\n      name={title}\n      onClick={() => {\n        props.setActiveChat(props.chat.chatID);\n      }}\n      active={props.chat.chatID === props.activeChat}\n    />\n  );\n};\n\nexport default Sidebaritem;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Input, Menu, Button, Form } from \"semantic-ui-react\";\n\nimport Sidebaritem from \"./Sidebaritem\";\n\nimport \"./Sidebar.css\";\n\nconst Sidebar = (props) => {\n  const handleForm = (e) => {\n    props.db\n      .collection(\"chats\")\n      .add({\n        title: e.target.title.value,\n        type: \"group\",\n        users: [props.db.doc(\"/users/\" + props.user)],\n      })\n      .then((result) => {\n        props.db.collection(result.id).add({\n          name: props.name,\n          author: props.db.doc(\"/users/\" + props.user),\n          date: props.dbFunc.Timestamp.now(),\n          content: \"This is the first message.\",\n        });\n        props.db\n          .collection(\"users\")\n          .doc(props.user)\n          .set(\n            {\n              chats: props.chatIDs.concat(result.id),\n            },\n            { merge: true }\n          );\n      });\n  };\n  return (\n    <Menu secondary vertical>\n      {props.chats.map((chat) => {\n        return (\n          <Sidebaritem\n            chat={chat}\n            db={props.db}\n            user={props.user}\n            setActiveChat={props.setActiveChat}\n            activeChat={props.activeChat}\n          />\n        );\n      })}\n      <Form onSubmit={handleForm}>\n        <Input id=\"title\" name=\"title\" placeholder=\"Group Name\" />\n        <Button type=\"submit\" floated=\"left\">\n          New Group\n        </Button>\n      </Form>\n    </Menu>\n  );\n};\n\nexport default Sidebar;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nconst Message = (props) => {\n  return (\n    <Comment>\n      <Comment.Content>\n        <Comment.Author as=\"a\">{props.data.name}</Comment.Author>\n        <Comment.Metadata>\n          <div>\n            {props.data.date.toDate().getHours() +\n              \":\" +\n              props.data.date.toDate().getMinutes()}\n          </div>\n        </Comment.Metadata>\n        <Comment.Text>{props.data.content}</Comment.Text>\n      </Comment.Content>\n    </Comment>\n  );\n};\n\nexport default Message;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Comment } from \"semantic-ui-react\";\n\nimport Message from \"./Message\";\n\nvar uniqid = require(\"uniqid\");\n\nconst Chat = (props) => {\n  const [feed, setFeed] = useState([]);\n\n  useEffect(() => {\n    console.log(\"props.activeChat: \", props.activeChat);\n    if (props.activeChat !== undefined) {\n      const query = props.db\n        .collection(props.activeChat)\n        .orderBy(\"date\", \"asc\");\n      query.onSnapshot((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => doc.data());\n        Promise.resolve().then(() => {\n          setFeed(data);\n        });\n      });\n    }\n  }, [props.activeChat]);\n\n  return (\n    <Comment.Group>\n      {feed.map((i) => {\n        return <Message key={uniqid()} data={i} db={props.db} />;\n      })}\n    </Comment.Group>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\n\nimport { Form, TextArea, Button } from \"semantic-ui-react\";\n\nimport \"./Main.css\";\n\nimport Chat from \"./Chat\";\n\nconst Main = (props) => {\n  const handleSend = (e) => {\n    e.preventDefault();\n    props.db\n      .collection(props.activeChat)\n      .add({\n        name: props.name,\n        author: props.db.doc(\"/users/\" + props.user),\n        date: props.dbFunc.Timestamp.now(),\n        content: e.target.reply.value,\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n      })\n      .then(() => {\n        e.target.reply.value = \"\";\n      });\n  };\n\n  return (\n    <div>\n      <Chat db={props.db} activeChat={props.activeChat} />\n      <Form onSubmit={handleSend}>\n        <TextArea id=\"reply\" name=\"reply\" placeholder=\"Reply\" />\n        <Button type=\"submit\" floated=\"right\">\n          Send\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport Sidebar from \"./Sidebar\";\nimport Main from \"./Main\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Grid } from \"semantic-ui-react\";\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nvar uniqid = require(\"uniqid\");\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCiemC3RJx8s3kHs4Y2SasrhG_epoQjEDw\",\n  authDomain: \"entropy-messenger.firebaseapp.com\",\n  databaseURL: \"https://entropy-messenger.firebaseio.com\",\n  projectId: \"entropy-messenger\",\n  storageBucket: \"entropy-messenger.appspot.com\",\n  messagingSenderId: \"739103714260\",\n  appId: \"1:739103714260:web:9f34197363bb3b2e4dc441\",\n  measurementId: \"G-WNTGXPFSRH\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar db = firebase.firestore();\nvar dbFunc = firebase.firestore;\n\nconst App = () => {\n  const [user, setUser] = useState();\n  const [name, setName] = useState();\n  const [chats, setChats] = useState([]);\n  const [chatIDs, setChatIDs] = useState([]);\n  const [activeChat, setActiveChat] = useState();\n  useEffect(() => {\n    //Initialize Firebase Auth\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then(function (result) {\n        const userRef = db.collection(\"users\").doc(result.user.uid);\n        userRef.get().then((doc) => {\n          if (doc.exists) {\n            setUser(result.user.uid);\n            setName(result.user.displayName);\n          } else {\n            db.collection(\"users\").doc(result.user.uid).set(\n              {\n                name: result.user.displayName,\n                email: result.user.email,\n                chats: [],\n                contacts: [],\n                activeChat: null,\n              },\n              { merge: false }\n            );\n          }\n        });\n      });\n  }, []);\n  useEffect(() => {\n    if (user !== undefined) {\n      const query = db.collection(\"users\").doc(user);\n      query.get().then((doc) => {\n        setActiveChat(doc.data().activeChat);\n        setChatIDs(doc.data().chats);\n        const chatGets = doc\n          .data()\n          .chats.map((chat) => db.collection(\"chats\").doc(chat).get());\n        Promise.all(chatGets).then((results) => {\n          setChats(\n            results.map((i) => {\n              return {\n                title: i.data().title,\n                type: i.data().type,\n                users: i.data().users,\n                chatID: i.id,\n              };\n            })\n          );\n        });\n      });\n    }\n  }, [user]);\n  const activeChatCallback = (chat) => {\n    console.log(\"setActiveChat: \", chat);\n    setActiveChat(chat);\n  };\n  return (\n    <Grid>\n      <Grid.Column width={3}>\n        <Sidebar\n          db={db}\n          dbFunc={dbFunc}\n          user={user}\n          name={name}\n          chats={chats}\n          chatIDs={chatIDs}\n          setActiveChat={activeChatCallback}\n          activeChat={activeChat}\n        />\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <Main\n          db={db}\n          dbFunc={dbFunc}\n          user={user}\n          name={name}\n          activeChat={activeChat}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}